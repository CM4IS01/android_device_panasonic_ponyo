diff --git a/bionic/libc/arch-arm/bionic/libgcc_compat.c b/bionic/libc/arch-arm/bionic/libgcc_compat.c
index d184566..0eff110 100644
--- a/bionic/libc/arch-arm/bionic/libgcc_compat.c
+++ b/bionic/libc/arch-arm/bionic/libgcc_compat.c
@@ -112,6 +112,7 @@
     XX(__aeabi_i2f)          \
     XX(__aeabi_l2d)          \
     XX(__aeabi_l2f)          \
+    XX(__aeabi_llsl)         \
     XX(__aeabi_lmul)         \
     XX(__aeabi_ui2d)         \
     XX(__aeabi_ui2f)         \
diff --git a/build/core/combo/TARGET_linux-arm.mk b/build/core/combo/TARGET_linux-arm.mk
index 8c89143..670e5cc 100644
--- a/build/core/combo/TARGET_linux-arm.mk
+++ b/build/core/combo/TARGET_linux-arm.mk
@@ -66,7 +66,7 @@ endif
 
 TARGET_NO_UNDEFINED_LDFLAGS := -Wl,--no-undefined
 
-TARGET_arm_CFLAGS :=    -O2 \
+TARGET_arm_CFLAGS :=    -O3 \
                         -fomit-frame-pointer \
                         -fstrict-aliasing    \
                         -funswitch-loops
@@ -77,9 +77,9 @@ TARGET_arm_CFLAGS :=    -O2 \
 # compiled as ARM.
 ifeq ($(ARCH_ARM_HAVE_THUMB_SUPPORT),true)
 TARGET_thumb_CFLAGS :=  -mthumb \
-                        -Os \
+                        -O3 \
                         -fomit-frame-pointer \
-                        -fno-strict-aliasing
+                        -fstrict-aliasing
 else
 TARGET_thumb_CFLAGS := $(TARGET_arm_CFLAGS)
 endif
@@ -146,10 +146,10 @@ else
 TARGET_GLOBAL_CFLAGS +=	-mno-thumb-interwork
 endif
 
-TARGET_GLOBAL_CPPFLAGS += -fvisibility-inlines-hidden
+TARGET_GLOBAL_CPPFLAGS += -fvisibility-inlines-hidden $(call cc-option,-std=gnu++11)
 
 # More flags/options can be added here
-TARGET_RELEASE_CFLAGS := \
+TARGET_RELEASE_CFLAGS += \
 			-DNDEBUG \
 			-g \
 			-Wstrict-aliasing=2 \
diff --git a/build/core/combo/select.mk b/build/core/combo/select.mk
index cdeb68a..b8e7d04 100644
--- a/build/core/combo/select.mk
+++ b/build/core/combo/select.mk
@@ -47,8 +47,10 @@ $(combo_target)HAVE_STRLCAT := 0
 $(combo_target)HAVE_KERNEL_MODULES := 0
 
 $(combo_target)GLOBAL_CFLAGS := -fno-exceptions -Wno-multichar
-$(combo_target)RELEASE_CFLAGS := -O2 -g -fno-strict-aliasing
-$(combo_target)GLOBAL_LDFLAGS :=
+$(combo_target)RELEASE_CFLAGS := -O3 -g -fno-strict-aliasing
+ifneq ($(HOST_OS),darwin)
+$(combo_target)GLOBAL_LDFLAGS := -Wl,-O2
+endif
 $(combo_target)GLOBAL_ARFLAGS := crsP
 
 $(combo_target)EXECUTABLE_SUFFIX :=
diff --git a/build/core/config.mk b/build/core/config.mk
index f8a316f..5612e98 100644
--- a/build/core/config.mk
+++ b/build/core/config.mk
@@ -124,6 +124,9 @@ TARGET_SHELL := mksh
 # are specific to the user's build configuration.
 include $(BUILD_SYSTEM)/envsetup.mk
 
+# Useful macros
+include $(BUILD_SYSTEM)/linaro_compilerchecks.mk
+
 # Boards may be defined under $(SRC_TARGET_DIR)/board/$(TARGET_DEVICE)
 # or under vendor/*/$(TARGET_DEVICE).  Search in both places, but
 # make sure only one exists.
@@ -321,8 +324,11 @@ TARGET_PROJECT_INCLUDES:= $(SRC_HEADERS) $(TARGET_OUT_HEADERS)
 # Many host compilers don't support these flags, so we have to make
 # sure to only specify them for the target compilers checked in to
 # the source tree.
-TARGET_GLOBAL_CFLAGS += $(TARGET_ERROR_FLAGS)
-TARGET_GLOBAL_CPPFLAGS += $(TARGET_ERROR_FLAGS)
+ifeq ($(TARGET_EXTRA_CPPFLAGS),)
+TARGET_EXTRA_CPPFLAGS := $(TARGET_EXTRA_CFLAGS)
+endif
+TARGET_GLOBAL_CFLAGS += $(TARGET_ERROR_FLAGS) $(TARGET_EXTRA_CFLAGS)
+TARGET_GLOBAL_CPPFLAGS += $(TARGET_ERROR_FLAGS) $(TARGET_EXTRA_CPPFLAGS)
 
 HOST_GLOBAL_CFLAGS += $(HOST_RELEASE_CFLAGS)
 HOST_GLOBAL_CPPFLAGS += $(HOST_RELEASE_CPPFLAGS)
diff --git a/frameworks/base/cmds/stagefright/SineSource.h b/frameworks/base/cmds/stagefright/SineSource.h
index 76ab669..abaf1f9 100644
--- a/frameworks/base/cmds/stagefright/SineSource.h
+++ b/frameworks/base/cmds/stagefright/SineSource.h
@@ -4,6 +4,10 @@
 
 #include <media/stagefright/MediaSource.h>
 
+#if __cplusplus < 201103L && !defined(__GXX_EXPERIMENTAL_CXX0X__) && !defined(constexpr)
+#define constexpr const
+#endif
+
 namespace android {
 
 struct MediaBufferGroup;
diff --git a/frameworks/base/core/jni/Android.mk b/frameworks/base/core/jni/Android.mk
index 3853973..e54de13 100755
--- a/frameworks/base/core/jni/Android.mk
+++ b/frameworks/base/core/jni/Android.mk
@@ -4,6 +4,7 @@ include $(CLEAR_VARS)
 LOCAL_CFLAGS += -DHAVE_CONFIG_H -DKHTML_NO_EXCEPTIONS -DGKWQ_NO_JAVA
 LOCAL_CFLAGS += -DNO_SUPPORT_JS_BINDING -DQT_NO_WHEELEVENT -DKHTML_NO_XBL
 LOCAL_CFLAGS += -U__APPLE__
+LOCAL_CFLAGS += -fno-strict-aliasing
 
 ifeq ($(TARGET_ARCH), arm)
 	LOCAL_CFLAGS += -DPACKED="__attribute__ ((packed))"
diff --git a/frameworks/base/core/jni/android/graphics/TextLayoutCache.cpp b/frameworks/base/core/jni/android/graphics/TextLayoutCache.cpp
index 4f90bbf..7befaab 100644
--- a/frameworks/base/core/jni/android/graphics/TextLayoutCache.cpp
+++ b/frameworks/base/core/jni/android/graphics/TextLayoutCache.cpp
@@ -161,7 +161,7 @@ sp<TextLayoutCacheValue> TextLayoutCache::getValue(SkPaint* paint,
                         "count=%d, entry size %d bytes, remaining space %d bytes"
                         " - Compute time in nanos: %d - Text='%s' ",
                         count, size, mMaxSize - mSize, value->getElapsedTime(),
-                        String8(text, count).string());
+                        String8((char16_t*)text, count).string());
             }
         } else {
             if (mDebugEnabled) {
@@ -170,7 +170,7 @@ sp<TextLayoutCacheValue> TextLayoutCache::getValue(SkPaint* paint,
                         "entry size %d bytes, remaining space %d bytes"
                         " - Compute time in nanos: %lld - Text='%s'",
                         start, count, contextCount, size, mMaxSize - mSize, endTime,
-                        String8(text, count).string());
+                        String8((char16_t*)text, count).string());
             }
         }
     } else {
@@ -188,7 +188,7 @@ sp<TextLayoutCacheValue> TextLayoutCache::getValue(SkPaint* paint,
                         "Cache get time in nanos: %lld - Gain in percent: %2.2f - Text='%s' ",
                         mCacheHitCount, start, count, contextCount,
                         value->getElapsedTime(), elapsedTimeThruCacheGet, deltaPercent,
-                        String8(text, count).string());
+                        String8((char16_t*)text, count).string());
             }
             if (mCacheHitCount % DEFAULT_DUMP_STATS_CACHE_HIT_INTERVAL == 0) {
                 dumpCacheStats();
@@ -248,7 +248,7 @@ TextLayoutCacheKey::TextLayoutCacheKey(const TextLayoutCacheKey& other) :
         flags(other.flags),
         hinting(other.hinting) {
     if (other.text) {
-        textCopy.setTo(other.text, other.contextCount);
+        textCopy.setTo((char16_t*)other.text, other.contextCount);
     }
 }
 
@@ -287,7 +287,7 @@ int TextLayoutCacheKey::compare(const TextLayoutCacheKey& lhs, const TextLayoutC
 }
 
 void TextLayoutCacheKey::internalTextCopy() {
-    textCopy.setTo(text, contextCount);
+    textCopy.setTo((char16_t*)text, contextCount);
     text = NULL;
 }
 
diff --git a/frameworks/base/core/jni/android/graphics/TextLayoutCache.h b/frameworks/base/core/jni/android/graphics/TextLayoutCache.h
index 580079d..28f5d46 100644
--- a/frameworks/base/core/jni/android/graphics/TextLayoutCache.h
+++ b/frameworks/base/core/jni/android/graphics/TextLayoutCache.h
@@ -100,7 +100,7 @@ private:
     uint32_t flags;
     SkPaint::Hinting hinting;
 
-    inline const UChar* getText() const { return text ? text : textCopy.string(); }
+    inline const UChar* getText() const { return text ? text : (UChar*)textCopy.string(); }
 
 }; // TextLayoutCacheKey
 
diff --git a/frameworks/base/core/jni/android_emoji_EmojiFactory.cpp b/frameworks/base/core/jni/android_emoji_EmojiFactory.cpp
index 81dae88..de708e2 100644
--- a/frameworks/base/core/jni/android_emoji_EmojiFactory.cpp
+++ b/frameworks/base/core/jni/android_emoji_EmojiFactory.cpp
@@ -125,9 +125,9 @@ static jobject android_emoji_EmojiFactory_newInstance(
     return NULL;
   }
 
-  const jchar* jchars = env->GetStringChars(name, NULL);
+  const jchar* jchars = (const jchar*)env->GetStringChars(name, NULL);
   jsize len = env->GetStringLength(name);
-  String8 str(String16(jchars, len));
+  String8 str(String16((const char16_t*)jchars, len));
 
   EmojiFactory *factory = gCaller->TryCallGetImplementation(str.string());
   // EmojiFactory *factory = EmojiFactory::GetImplementation(str.string());
@@ -152,7 +152,7 @@ static jobject android_emoji_EmojiFactory_newAvailableInstance(
     return NULL;
   }
   String16 name_16(String8(factory->Name()));
-  jstring jname = env->NewString(name_16.string(), name_16.size());
+  jstring jname = env->NewString((const jchar*)name_16.string(), name_16.size());
   if (NULL == jname) {
     return NULL;
   }
diff --git a/frameworks/base/core/jni/android_hardware_Camera.cpp b/frameworks/base/core/jni/android_hardware_Camera.cpp
index c8dd098..28b73d4 100644
--- a/frameworks/base/core/jni/android_hardware_Camera.cpp
+++ b/frameworks/base/core/jni/android_hardware_Camera.cpp
@@ -711,7 +711,7 @@ static void android_hardware_Camera_setParameters(JNIEnv *env, jobject thiz, jst
     const jchar* str = env->GetStringCritical(params, 0);
     String8 params8;
     if (params) {
-        params8 = String8(str, env->GetStringLength(params));
+        params8 = String8((char16_t*)str, env->GetStringLength(params));
         env->ReleaseStringCritical(params, str);
     }
     if (camera->setParameters(params8) != NO_ERROR) {
diff --git a/frameworks/base/core/jni/android_media_AudioSystem.cpp b/frameworks/base/core/jni/android_media_AudioSystem.cpp
index 0c5101f..c574dd3 100644
--- a/frameworks/base/core/jni/android_media_AudioSystem.cpp
+++ b/frameworks/base/core/jni/android_media_AudioSystem.cpp
@@ -82,7 +82,7 @@ android_media_AudioSystem_setParameters(JNIEnv *env, jobject thiz, jstring keyVa
     const jchar* c_keyValuePairs = env->GetStringCritical(keyValuePairs, 0);
     String8 c_keyValuePairs8;
     if (keyValuePairs) {
-        c_keyValuePairs8 = String8(c_keyValuePairs, env->GetStringLength(keyValuePairs));
+        c_keyValuePairs8 = String8((char16_t*)c_keyValuePairs, env->GetStringLength(keyValuePairs));
         env->ReleaseStringCritical(keyValuePairs, c_keyValuePairs);
     }
     int status = check_AudioSystem_Command(AudioSystem::setParameters(0, c_keyValuePairs8));
@@ -95,7 +95,7 @@ android_media_AudioSystem_getParameters(JNIEnv *env, jobject thiz, jstring keys)
     const jchar* c_keys = env->GetStringCritical(keys, 0);
     String8 c_keys8;
     if (keys) {
-        c_keys8 = String8(c_keys, env->GetStringLength(keys));
+        c_keys8 = String8((char16_t*)c_keys, env->GetStringLength(keys));
         env->ReleaseStringCritical(keys, c_keys);
     }
     return env->NewStringUTF(AudioSystem::getParameters(0, c_keys8).string());
diff --git a/frameworks/base/core/jni/android_os_FileUtils.cpp b/frameworks/base/core/jni/android_os_FileUtils.cpp
index 8d65cbc..d9dfda6 100644
--- a/frameworks/base/core/jni/android_os_FileUtils.cpp
+++ b/frameworks/base/core/jni/android_os_FileUtils.cpp
@@ -53,7 +53,7 @@ jint android_os_FileUtils_setPermissions(JNIEnv* env, jobject clazz,
     const jchar* str = env->GetStringCritical(file, 0);
     String8 file8;
     if (str) {
-        file8 = String8(str, env->GetStringLength(file));
+        file8 = String8((const char16_t*)str, env->GetStringLength(file));
         env->ReleaseStringCritical(file, str);
     }
     if (file8.size() <= 0) {
@@ -74,7 +74,7 @@ jint android_os_FileUtils_getPermissions(JNIEnv* env, jobject clazz,
     const jchar* str = env->GetStringCritical(file, 0);
     String8 file8;
     if (str) {
-        file8 = String8(str, env->GetStringLength(file));
+        file8 = String8((const char16_t*)str, env->GetStringLength(file));
         env->ReleaseStringCritical(file, str);
     }
     if (file8.size() <= 0) {
diff --git a/frameworks/base/core/jni/android_util_AssetManager.cpp b/frameworks/base/core/jni/android_util_AssetManager.cpp
index 1a8f3e7..efccb5f 100644
--- a/frameworks/base/core/jni/android_util_AssetManager.cpp
+++ b/frameworks/base/core/jni/android_util_AssetManager.cpp
@@ -439,7 +439,7 @@ static jint android_content_AssetManager_addAssetPath(JNIEnv* env, jobject clazz
 {
     ScopedUtfChars path8(env, path);
     if (path8.c_str() == NULL) {
-        return NULL;
+        return JNI_FALSE;
     }
 
     AssetManager* am = assetManagerForJavaObject(env, clazz);
@@ -568,22 +568,22 @@ static jint android_content_AssetManager_getResourceIdentifier(JNIEnv* env, jobj
     }
 
     const char16_t* defType16 = defType
-        ? env->GetStringChars(defType, NULL) : NULL;
+        ? (char16_t*)env->GetStringChars(defType, NULL) : NULL;
     jsize defTypeLen = defType
         ? env->GetStringLength(defType) : 0;
     const char16_t* defPackage16 = defPackage
-        ? env->GetStringChars(defPackage, NULL) : NULL;
+        ? (char16_t*)env->GetStringChars(defPackage, NULL) : NULL;
     jsize defPackageLen = defPackage
         ? env->GetStringLength(defPackage) : 0;
 
     jint ident = am->getResources().identifierForName(
-        name16.get(), name16.size(), defType16, defTypeLen, defPackage16, defPackageLen);
+        (const char16_t*)name16.get(), name16.size(), defType16, defTypeLen, defPackage16, defPackageLen);
 
     if (defPackage16) {
-        env->ReleaseStringChars(defPackage, defPackage16);
+        env->ReleaseStringChars(defPackage, (jchar*)defPackage16);
     }
     if (defType16) {
-        env->ReleaseStringChars(defType, defType16);
+        env->ReleaseStringChars(defType, (jchar*)defType16);
     }
 
     return ident;
@@ -1570,7 +1570,7 @@ static jobjectArray android_content_AssetManager_getArrayStringResource(JNIEnv*
                 str = env->NewStringUTF(str8);
             } else {
                 const char16_t* str16 = pool->stringAt(value.data, &strLen);
-                str = env->NewString(str16, strLen);
+                str = env->NewString((jchar*)str16, strLen);
             }
 
             // If one of our NewString{UTF} calls failed due to memory, an
diff --git a/frameworks/base/core/jni/android_util_Binder.cpp b/frameworks/base/core/jni/android_util_Binder.cpp
index 2bd4fa0..0b368f7 100644
--- a/frameworks/base/core/jni/android_util_Binder.cpp
+++ b/frameworks/base/core/jni/android_util_Binder.cpp
@@ -942,7 +942,7 @@ static jstring android_os_BinderProxy_getInterfaceDescriptor(JNIEnv* env, jobjec
     IBinder* target = (IBinder*) env->GetIntField(obj, gBinderProxyOffsets.mObject);
     if (target != NULL) {
         const String16& desc = target->getInterfaceDescriptor();
-        return env->NewString(desc.string(), desc.size());
+        return env->NewString((jchar*)desc.string(), desc.size());
     }
     jniThrowException(env, "java/lang/RuntimeException",
             "No binder found for object");
@@ -1420,7 +1420,7 @@ static void android_os_Parcel_writeString(JNIEnv* env, jobject clazz, jstring va
         if (val) {
             const jchar* str = env->GetStringCritical(val, 0);
             if (str) {
-                err = parcel->writeString16(str, env->GetStringLength(val));
+                err = parcel->writeString16((char16_t*)str, env->GetStringLength(val));
                 env->ReleaseStringCritical(val, str);
             }
         } else {
@@ -1524,7 +1524,7 @@ static jstring android_os_Parcel_readString(JNIEnv* env, jobject clazz)
         size_t len;
         const char16_t* str = parcel->readString16Inplace(&len);
         if (str) {
-            return env->NewString(str, len);
+            return env->NewString((jchar*)str, len);
         }
         return NULL;
     }
@@ -1566,7 +1566,7 @@ static jobject android_os_Parcel_openFileDescriptor(JNIEnv* env, jobject clazz,
         jniThrowException(env, "java/lang/IllegalStateException", NULL);
         return NULL;
     }
-    String8 name8(str, env->GetStringLength(name));
+    String8 name8((char16_t*)str, env->GetStringLength(name));
     env->ReleaseStringCritical(name, str);
     int flags=0;
     switch (mode&0x30000000) {
@@ -1784,7 +1784,7 @@ static void android_os_Parcel_writeInterfaceToken(JNIEnv* env, jobject clazz, js
         // the caller expects to be invoking
         const jchar* str = env->GetStringCritical(name, 0);
         if (str != NULL) {
-            parcel->writeInterfaceToken(String16(str, env->GetStringLength(name)));
+            parcel->writeInterfaceToken(String16((char16_t*)str, env->GetStringLength(name)));
             env->ReleaseStringCritical(name, str);
         }
     }
@@ -1801,7 +1801,7 @@ static void android_os_Parcel_enforceInterface(JNIEnv* env, jobject clazz, jstri
             IPCThreadState* threadState = IPCThreadState::self();
             const int32_t oldPolicy = threadState->getStrictModePolicy();
             const bool isValid = parcel->enforceInterface(
-                String16(str, env->GetStringLength(name)),
+                String16((char16_t*)str, env->GetStringLength(name)),
                 threadState);
             env->ReleaseStringCritical(name, str);
             if (isValid) {
diff --git a/frameworks/base/core/jni/android_util_Process.cpp b/frameworks/base/core/jni/android_util_Process.cpp
index 47d343a..bb9defa 100644
--- a/frameworks/base/core/jni/android_util_Process.cpp
+++ b/frameworks/base/core/jni/android_util_Process.cpp
@@ -117,7 +117,7 @@ jint android_os_Process_getUidForName(JNIEnv* env, jobject clazz, jstring name)
     const jchar* str16 = env->GetStringCritical(name, 0);
     String8 name8;
     if (str16) {
-        name8 = String8(str16, env->GetStringLength(name));
+        name8 = String8((char16_t*)str16, env->GetStringLength(name));
         env->ReleaseStringCritical(name, str16);
     }
 
@@ -148,7 +148,7 @@ jint android_os_Process_getGidForName(JNIEnv* env, jobject clazz, jstring name)
     const jchar* str16 = env->GetStringCritical(name, 0);
     String8 name8;
     if (str16) {
-        name8 = String8(str16, env->GetStringLength(name));
+        name8 = String8((char16_t*)str16, env->GetStringLength(name));
         env->ReleaseStringCritical(name, str16);
     }
 
@@ -341,7 +341,7 @@ void android_os_Process_setArgV0(JNIEnv* env, jobject clazz, jstring name)
     const jchar* str = env->GetStringCritical(name, 0);
     String8 name8;
     if (str) {
-        name8 = String8(str, env->GetStringLength(name));
+        name8 = String8((char16_t*)str, env->GetStringLength(name));
         env->ReleaseStringCritical(name, str);
     }
 
diff --git a/frameworks/base/core/jni/android_util_XmlBlock.cpp b/frameworks/base/core/jni/android_util_XmlBlock.cpp
index 45728db..a8af27c 100644
--- a/frameworks/base/core/jni/android_util_XmlBlock.cpp
+++ b/frameworks/base/core/jni/android_util_XmlBlock.cpp
@@ -265,19 +265,19 @@ static jint android_content_XmlBlock_nativeGetAttributeIndex(JNIEnv* env, jobjec
     const char16_t* ns16 = NULL;
     jsize nsLen = 0;
     if (ns) {
-        ns16 = env->GetStringChars(ns, NULL);
+        ns16 = (char16_t*)env->GetStringChars(ns, NULL);
         nsLen = env->GetStringLength(ns);
     }
 
-    const char16_t* name16 = env->GetStringChars(name, NULL);
+    const char16_t* name16 = (char16_t*)env->GetStringChars(name, NULL);
     jsize nameLen = env->GetStringLength(name);
 
     jint idx = (jint)st->indexOfAttribute(ns16, nsLen, name16, nameLen);
 
     if (ns) {
-        env->ReleaseStringChars(ns, ns16);
+        env->ReleaseStringChars(ns, (jchar*)ns16);
     }
-    env->ReleaseStringChars(name, name16);
+    env->ReleaseStringChars(name, (jchar*)name16);
 
     return idx;
 }
diff --git a/frameworks/base/core/jni/android_view_KeyCharacterMap.cpp b/frameworks/base/core/jni/android_view_KeyCharacterMap.cpp
index b9f3738..cce68d9 100644
--- a/frameworks/base/core/jni/android_view_KeyCharacterMap.cpp
+++ b/frameworks/base/core/jni/android_view_KeyCharacterMap.cpp
@@ -97,7 +97,7 @@ static jchar nativeGetMatch(JNIEnv *env, jobject clazz, jint ptr, jint keyCode,
         return 0;
     }
 
-    char16_t result = map->getMatch(keyCode, chars, size_t(numChars), metaState);
+    char16_t result = map->getMatch(keyCode, (const char16_t*)chars, size_t(numChars), metaState);
 
     env->ReleasePrimitiveArrayCritical(charsArray, chars, JNI_ABORT);
     return result;
@@ -125,7 +125,7 @@ static jobjectArray nativeGetEvents(JNIEnv *env, jobject clazz, jint ptr, jint d
 
     Vector<KeyEvent> events;
     jobjectArray result = NULL;
-    if (map->getEvents(deviceId, chars, size_t(numChars), events)) {
+    if (map->getEvents(deviceId, (const char16_t*)chars, size_t(numChars), events)) {
         result = env->NewObjectArray(jsize(events.size()), gKeyEventClassInfo.clazz, NULL);
         if (result) {
             for (size_t i = 0; i < events.size(); i++) {
diff --git a/frameworks/base/core/jni/android_view_Surface.cpp b/frameworks/base/core/jni/android_view_Surface.cpp
index 3a7b918..18841f0 100644
--- a/frameworks/base/core/jni/android_view_Surface.cpp
+++ b/frameworks/base/core/jni/android_view_Surface.cpp
@@ -234,7 +234,7 @@ static void Surface_init(
         surface = client->createSurface(dpy, w, h, format, flags);
     } else {
         const jchar* str = env->GetStringCritical(jname, 0);
-        const String8 name(str, env->GetStringLength(jname));
+        const String8 name((const char16_t*)str, env->GetStringLength(jname));
         env->ReleaseStringCritical(jname, str);
         surface = client->createSurface(name, dpy, w, h, format, flags);
     }
diff --git a/frameworks/base/include/binder/Binder.h b/frameworks/base/include/binder/Binder.h
index ba3ac4b..0a01828 100644
--- a/frameworks/base/include/binder/Binder.h
+++ b/frameworks/base/include/binder/Binder.h
@@ -69,7 +69,10 @@ private:
 
     class Extras;
 
-            Extras*     mExtras;
+            union {
+                Extras*     mExtras;
+                volatile int32_t mExtrasInt;
+            };
             void*       mReserved0;
 };
 
diff --git a/frameworks/base/include/media/ToneGenerator.h b/frameworks/base/include/media/ToneGenerator.h
index 1ad1f26..9811d00 100644
--- a/frameworks/base/include/media/ToneGenerator.h
+++ b/frameworks/base/include/media/ToneGenerator.h
@@ -199,12 +199,16 @@ private:
         NUM_REGIONS
     };
 
+#if __cplusplus < 201103L && !defined(__GXX_EXPERIMENTAL_CXX0X__)
+#define constexpr const
+#endif
+
     static const unsigned char sToneMappingTable[NUM_REGIONS-1][NUM_SUP_TONES];
 
-    static const unsigned int TONEGEN_MAX_WAVES = 3;     // Maximun number of sine waves in a tone segment
-    static const unsigned int TONEGEN_MAX_SEGMENTS = 12;  // Maximun number of segments in a tone descriptor
-    static const unsigned int TONEGEN_INF = 0xFFFFFFFF;  // Represents infinite time duration
-    static const float TONEGEN_GAIN = 0.9;  // Default gain passed to  WaveGenerator().
+    static constexpr unsigned int TONEGEN_MAX_WAVES = 3;     // Maximun number of sine waves in a tone segment
+    static constexpr unsigned int TONEGEN_MAX_SEGMENTS = 12;  // Maximun number of segments in a tone descriptor
+    static constexpr unsigned int TONEGEN_INF = 0xFFFFFFFF;  // Represents infinite time duration
+    static constexpr float TONEGEN_GAIN = 0.9;  // Default gain passed to  WaveGenerator().
 
     // ToneDescriptor class contains all parameters needed to generate a tone:
     //    - The array waveFreq[]:
diff --git a/frameworks/base/include/media/stagefright/AACWriter.h b/frameworks/base/include/media/stagefright/AACWriter.h
index fa3ab8a..a8c397d 100644
--- a/frameworks/base/include/media/stagefright/AACWriter.h
+++ b/frameworks/base/include/media/stagefright/AACWriter.h
@@ -17,6 +17,7 @@
 #ifndef AAC_WRITER_H_
 #define AAC_WRITER_H_
 
+#include <media/stagefright/foundation/ABase.h> // DISALLOW_EVIL_CONSTRUCTORS
 #include <media/stagefright/MediaWriter.h>
 #include <utils/threads.h>
 
diff --git a/frameworks/base/include/media/stagefright/SurfaceMediaSource.h b/frameworks/base/include/media/stagefright/SurfaceMediaSource.h
index 4fedf1c..fe439ea 100644
--- a/frameworks/base/include/media/stagefright/SurfaceMediaSource.h
+++ b/frameworks/base/include/media/stagefright/SurfaceMediaSource.h
@@ -24,6 +24,22 @@
 #include <media/stagefright/MediaSource.h>
 #include <media/stagefright/MediaBuffer.h>
 
+#ifndef DISALLOW_COPY_AND_ASSIGN
+// Convenience Macro to make copy constructor and assignment operator private
+// (thereby disallowing copying and assigning).
+#define DISALLOW_COPY_AND_ASSIGN(TypeName) \
+  TypeName(const TypeName&);               \
+  void operator=(const TypeName&)
+#endif
+
+#ifndef DISALLOW_IMPLICIT_CONSTRUCTORS
+// A macro to disallow all the implicit constructors, namely the
+// default constructor, copy constructor and operator= functions.
+#define DISALLOW_IMPLICIT_CONSTRUCTORS(TypeName) \
+  TypeName();                                    \
+  DISALLOW_COPY_AND_ASSIGN(TypeName)
+#endif
+
 namespace android {
 // ----------------------------------------------------------------------------
 
@@ -111,7 +127,7 @@ public:
     // Make sure this is called when the mutex is locked
     virtual status_t onFrameReceivedLocked();
 
-    virtual status_t setScalingMode(int mode) { } // no op for encoding
+    virtual status_t setScalingMode(int mode) { return OK; } // no op for encoding
     virtual int query(int what, int* value);
 
     // Just confirming to the ISurfaceTexture interface as of now
diff --git a/frameworks/base/include/utils/ResourceTypes.h b/frameworks/base/include/utils/ResourceTypes.h
index d0cd257..c8b5ae5 100644
--- a/frameworks/base/include/utils/ResourceTypes.h
+++ b/frameworks/base/include/utils/ResourceTypes.h
@@ -644,25 +644,25 @@ public:
 
     // These are available for all nodes:
     int32_t getCommentID() const;
-    const uint16_t* getComment(size_t* outLen) const;
+    const char16_t* getComment(size_t* outLen) const;
     uint32_t getLineNumber() const;
     
     // This is available for TEXT:
     int32_t getTextID() const;
-    const uint16_t* getText(size_t* outLen) const;
+    const char16_t* getText(size_t* outLen) const;
     ssize_t getTextValue(Res_value* outValue) const;
     
     // These are available for START_NAMESPACE and END_NAMESPACE:
     int32_t getNamespacePrefixID() const;
-    const uint16_t* getNamespacePrefix(size_t* outLen) const;
+    const char16_t* getNamespacePrefix(size_t* outLen) const;
     int32_t getNamespaceUriID() const;
-    const uint16_t* getNamespaceUri(size_t* outLen) const;
+    const char16_t* getNamespaceUri(size_t* outLen) const;
     
     // These are available for START_TAG and END_TAG:
     int32_t getElementNamespaceID() const;
-    const uint16_t* getElementNamespace(size_t* outLen) const;
+    const char16_t* getElementNamespace(size_t* outLen) const;
     int32_t getElementNameID() const;
-    const uint16_t* getElementName(size_t* outLen) const;
+    const char16_t* getElementName(size_t* outLen) const;
     
     // Remaining methods are for retrieving information about attributes
     // associated with a START_TAG:
@@ -671,14 +671,14 @@ public:
     
     // Returns -1 if no namespace, -2 if idx out of range.
     int32_t getAttributeNamespaceID(size_t idx) const;
-    const uint16_t* getAttributeNamespace(size_t idx, size_t* outLen) const;
+    const char16_t* getAttributeNamespace(size_t idx, size_t* outLen) const;
     
     int32_t getAttributeNameID(size_t idx) const;
-    const uint16_t* getAttributeName(size_t idx, size_t* outLen) const;
+    const char16_t* getAttributeName(size_t idx, size_t* outLen) const;
     uint32_t getAttributeNameResID(size_t idx) const;
     
     int32_t getAttributeValueStringID(size_t idx) const;
-    const uint16_t* getAttributeStringValue(size_t idx, size_t* outLen) const;
+    const char16_t* getAttributeStringValue(size_t idx, size_t* outLen) const;
     
     int32_t getAttributeDataType(size_t idx) const;
     int32_t getAttributeData(size_t idx) const;
@@ -1989,7 +1989,7 @@ public:
                                size_t defPackageLen = 0,
                                uint32_t* outTypeSpecFlags = NULL) const;
 
-    static bool expandResourceRef(const uint16_t* refStr, size_t refLen,
+    static bool expandResourceRef(const char16_t* refStr, size_t refLen,
                                   String16* outPackage,
                                   String16* outType,
                                   String16* outName,
diff --git a/frameworks/base/include/utils/Singleton.h b/frameworks/base/include/utils/Singleton.h
index a42ce21..4dde6ea 100644
--- a/frameworks/base/include/utils/Singleton.h
+++ b/frameworks/base/include/utils/Singleton.h
@@ -65,9 +65,9 @@ private:
  */
 
 #define ANDROID_SINGLETON_STATIC_INSTANCE(TYPE)                 \
-    template class Singleton< TYPE >;                           \
-    template<> Mutex Singleton< TYPE >::sLock(Mutex::PRIVATE);  \
-    template<> TYPE* Singleton< TYPE >::sInstance(0);
+    template class ANDROID_API Singleton< TYPE >;                           \
+    template<> ANDROID_API Mutex Singleton< TYPE >::sLock(Mutex::PRIVATE);  \
+    template<> ANDROID_API TYPE* Singleton< TYPE >::sInstance(0);
 
 
 // ---------------------------------------------------------------------------
diff --git a/frameworks/base/include/utils/Unicode.h b/frameworks/base/include/utils/Unicode.h
index 9273533..66e56b0 100644
--- a/frameworks/base/include/utils/Unicode.h
+++ b/frameworks/base/include/utils/Unicode.h
@@ -22,8 +22,10 @@
 
 extern "C" {
 
+#if __cplusplus < 201103L && !defined(__GXX_EXPERIMENTAL_CXX0X__)
 typedef uint32_t char32_t;
 typedef uint16_t char16_t;
+#endif
 
 // Standard string functions on char16_t strings.
 int strcmp16(const char16_t *, const char16_t *);
diff --git a/frameworks/base/libs/binder/Binder.cpp b/frameworks/base/libs/binder/Binder.cpp
index 9945f91..3517f8f 100644
--- a/frameworks/base/libs/binder/Binder.cpp
+++ b/frameworks/base/libs/binder/Binder.cpp
@@ -142,7 +142,7 @@ void BBinder::attachObject(
     if (!e) {
         e = new Extras;
         if (android_atomic_cmpxchg(0, reinterpret_cast<int32_t>(e),
-                reinterpret_cast<volatile int32_t*>(&mExtras)) != 0) {
+                &mExtrasInt) != 0) {
             delete e;
             e = mExtras;
         }
diff --git a/frameworks/base/libs/hwui/FontRenderer.cpp b/frameworks/base/libs/hwui/FontRenderer.cpp
index 84de916..b886d9d 100644
--- a/frameworks/base/libs/hwui/FontRenderer.cpp
+++ b/frameworks/base/libs/hwui/FontRenderer.cpp
@@ -696,12 +696,15 @@ void FontRenderer::setFont(SkPaint* paint, uint32_t fontId, float fontSize) {
     }
 
     const float skewX = paint->getTextSkewX();
-    uint32_t italicStyle = *(uint32_t*) &skewX;
+    uint32_t italicStyle;
+    memcpy(&italicStyle, &skewX, sizeof(italicStyle));
     const float scaleXFloat = paint->getTextScaleX();
-    uint32_t scaleX = *(uint32_t*) &scaleXFloat;
+    uint32_t scaleX;
+    memcpy(&scaleX, &scaleXFloat, sizeof(scaleX));
     SkPaint::Style style = paint->getStyle();
     const float strokeWidthFloat = paint->getStrokeWidth();
-    uint32_t strokeWidth = *(uint32_t*) &strokeWidthFloat;
+    uint32_t strokeWidth;
+    memcpy(&strokeWidth, &strokeWidthFloat, sizeof(strokeWidth));
     mCurrentFont = Font::create(this, fontId, fontSize, flags, italicStyle,
             scaleX, style, strokeWidth);
 
diff --git a/frameworks/base/libs/hwui/ShapeCache.h b/frameworks/base/libs/hwui/ShapeCache.h
index 0660b69..0b37828 100644
--- a/frameworks/base/libs/hwui/ShapeCache.h
+++ b/frameworks/base/libs/hwui/ShapeCache.h
@@ -90,9 +90,9 @@ struct ShapeCacheEntry {
         cap = SkPaint::kDefault_Cap;
         style = SkPaint::kFill_Style;
         float v = 4.0f;
-        miter = *(uint32_t*) &v;
+        memcpy(&miter, &v, sizeof(miter));
         v = 1.0f;
-        strokeWidth = *(uint32_t*) &v;
+        memcpy(&strokeWidth, &v, sizeof(strokeWidth));
         pathEffect = NULL;
     }
 
@@ -101,9 +101,9 @@ struct ShapeCacheEntry {
         join = paint->getStrokeJoin();
         cap = paint->getStrokeCap();
         float v = paint->getStrokeMiter();
-        miter = *(uint32_t*) &v;
+        memcpy(&miter, &v, sizeof(miter));
         v = paint->getStrokeWidth();
-        strokeWidth = *(uint32_t*) &v;
+        memcpy(&strokeWidth, &v, sizeof(strokeWidth));
         style = paint->getStyle();
         pathEffect = paint->getPathEffect();
     }
@@ -148,10 +148,10 @@ protected:
 struct RoundRectShapeCacheEntry: public ShapeCacheEntry {
     RoundRectShapeCacheEntry(float width, float height, float rx, float ry, SkPaint* paint):
             ShapeCacheEntry(ShapeCacheEntry::kShapeRoundRect, paint) {
-        mWidth = *(uint32_t*) &width;
-        mHeight = *(uint32_t*) &height;
-        mRx = *(uint32_t*) &rx;
-        mRy = *(uint32_t*) &ry;
+        memcpy(&mWidth, &width, sizeof(mWidth));
+        memcpy(&mHeight, &height, sizeof(mHeight));
+        memcpy(&mRx, &rx, sizeof(mRx));
+        memcpy(&mRy, &ry, sizeof(mRy));
     }
 
     RoundRectShapeCacheEntry(): ShapeCacheEntry() {
@@ -185,7 +185,7 @@ private:
 struct CircleShapeCacheEntry: public ShapeCacheEntry {
     CircleShapeCacheEntry(float radius, SkPaint* paint):
             ShapeCacheEntry(ShapeCacheEntry::kShapeCircle, paint) {
-        mRadius = *(uint32_t*) &radius;
+        memcpy(&mRadius, &radius, sizeof(mRadius));
     }
 
     CircleShapeCacheEntry(): ShapeCacheEntry() {
@@ -207,8 +207,8 @@ private:
 struct OvalShapeCacheEntry: public ShapeCacheEntry {
     OvalShapeCacheEntry(float width, float height, SkPaint* paint):
             ShapeCacheEntry(ShapeCacheEntry::kShapeOval, paint) {
-        mWidth = *(uint32_t*) &width;
-        mHeight = *(uint32_t*) &height;
+        memcpy(&mWidth, &width, sizeof(mWidth));
+        memcpy(&mHeight, &height, sizeof(mHeight));
     }
 
     OvalShapeCacheEntry(): ShapeCacheEntry() {
@@ -233,8 +233,8 @@ private:
 struct RectShapeCacheEntry: public ShapeCacheEntry {
     RectShapeCacheEntry(float width, float height, SkPaint* paint):
             ShapeCacheEntry(ShapeCacheEntry::kShapeRect, paint) {
-        mWidth = *(uint32_t*) &width;
-        mHeight = *(uint32_t*) &height;
+        memcpy(&mWidth, &width, sizeof(mWidth));
+        memcpy(&mHeight, &height, sizeof(mHeight));
     }
 
     RectShapeCacheEntry(): ShapeCacheEntry() {
@@ -260,10 +260,10 @@ struct ArcShapeCacheEntry: public ShapeCacheEntry {
     ArcShapeCacheEntry(float width, float height, float startAngle, float sweepAngle,
             bool useCenter, SkPaint* paint):
             ShapeCacheEntry(ShapeCacheEntry::kShapeArc, paint) {
-        mWidth = *(uint32_t*) &width;
-        mHeight = *(uint32_t*) &height;
-        mStartAngle = *(uint32_t*) &startAngle;
-        mSweepAngle = *(uint32_t*) &sweepAngle;
+        memcpy(&mWidth, &width, sizeof(mWidth));
+        memcpy(&mHeight, &height, sizeof(mHeight));
+        memcpy(&mStartAngle, &startAngle, sizeof(mStartAngle));
+        memcpy(&mSweepAngle, &sweepAngle, sizeof(mSweepAngle));
         mUseCenter = useCenter ? 1 : 0;
     }
 
diff --git a/frameworks/base/libs/hwui/TextDropShadowCache.h b/frameworks/base/libs/hwui/TextDropShadowCache.h
index e2bdde1..35eb4cc 100644
--- a/frameworks/base/libs/hwui/TextDropShadowCache.h
+++ b/frameworks/base/libs/hwui/TextDropShadowCache.h
@@ -49,10 +49,10 @@ struct ShadowText {
         }
 
         const float skewX = paint->getTextSkewX();
-        italicStyle = *(uint32_t*) &skewX;
+        memcpy(&italicStyle, &skewX, sizeof(italicStyle));
 
         const float scaleXFloat = paint->getTextScaleX();
-        scaleX = *(uint32_t*) &scaleXFloat;
+        memcpy(&scaleX, &scaleXFloat, sizeof(scaleX));
     }
 
     ~ShadowText() {
diff --git a/frameworks/base/libs/rs/Android.mk b/frameworks/base/libs/rs/Android.mk
index 58d3e5c..c0f20b2 100644
--- a/frameworks/base/libs/rs/Android.mk
+++ b/frameworks/base/libs/rs/Android.mk
@@ -135,7 +135,7 @@ LOCAL_STATIC_LIBRARIES := libdex libft2
 LOCAL_C_INCLUDES += external/freetype/include external/zlib dalvik
 LOCAL_C_INCLUDES += frameworks/compile/libbcc/include
 
-LOCAL_CFLAGS += -Werror -Wall -Wno-unused-parameter -Wno-unused-variable
+LOCAL_CFLAGS += -Wall -Wno-unused-parameter -Wno-unused-variable
 
 LOCAL_LDLIBS := -lpthread -ldl
 LOCAL_MODULE:= libRS
@@ -180,7 +180,7 @@ $(GEN): $(intermediates)/%.cpp : $(LOCAL_PATH)/%.cpp.rsg
 
 LOCAL_GENERATED_SOURCES += $(GEN)
 
-LOCAL_CFLAGS += -Werror -Wall -Wno-unused-parameter -Wno-unused-variable
+LOCAL_CFLAGS += -Wall -Wno-unused-parameter -Wno-unused-variable
 LOCAL_CFLAGS += -DANDROID_RS_SERIALIZE
 LOCAL_CFLAGS += -fPIC
 
diff --git a/frameworks/base/libs/rs/driver/rsdCore.cpp b/frameworks/base/libs/rs/driver/rsdCore.cpp
index 247f4dc..e707788 100644
--- a/frameworks/base/libs/rs/driver/rsdCore.cpp
+++ b/frameworks/base/libs/rs/driver/rsdCore.cpp
@@ -274,10 +274,10 @@ void Shutdown(Context *rsc) {
     for (uint32_t ct = 0; ct < dc->mWorkers.mCount; ct++) {
         dc->mWorkers.mLaunchSignals[ct].set();
     }
-    int status;
+    //int status;
     void *res;
     for (uint32_t ct = 0; ct < dc->mWorkers.mCount; ct++) {
-        status = pthread_join(dc->mWorkers.mThreadId[ct], &res);
+        /*status =*/ pthread_join(dc->mWorkers.mThreadId[ct], &res);
     }
     rsAssert(android_atomic_acquire_load(&dc->mWorkers.mRunningCount) == 0);
 
diff --git a/frameworks/base/libs/rs/driver/rsdRuntimeStubs.cpp b/frameworks/base/libs/rs/driver/rsdRuntimeStubs.cpp
index 90c8928..c43f46c 100644
--- a/frameworks/base/libs/rs/driver/rsdRuntimeStubs.cpp
+++ b/frameworks/base/libs/rs/driver/rsdRuntimeStubs.cpp
@@ -439,7 +439,9 @@ unsigned int SC_umodsi3(unsigned int a, unsigned int b) {
 }
 
 static void SC_debugF(const char *s, float f) {
-    LOGD("%s %f, 0x%08x", s, f, *((int *) (&f)));
+    int d;
+    memcpy(&d, &f, sizeof(d));
+    LOGD("%s %f, 0x%08x", s, f, d);
 }
 static void SC_debugFv2(const char *s, float f1, float f2) {
     LOGD("%s {%f, %f}", s, f1, f2);
@@ -451,7 +453,9 @@ static void SC_debugFv4(const char *s, float f1, float f2, float f3, float f4) {
     LOGD("%s {%f, %f, %f, %f}", s, f1, f2, f3, f4);
 }
 static void SC_debugD(const char *s, double d) {
-    LOGD("%s %f, 0x%08llx", s, d, *((long long *) (&d)));
+    long long l;
+    memcpy(&l, &d, sizeof(d));
+    LOGD("%s %f, 0x%08llx", s, d, l);
 }
 static void SC_debugFM4v4(const char *s, const float *f) {
     LOGD("%s {%f, %f, %f, %f", s, f[0], f[4], f[8], f[12]);
diff --git a/frameworks/base/libs/rs/rsStream.h b/frameworks/base/libs/rs/rsStream.h
index 62bcf94..71f7997 100644
--- a/frameworks/base/libs/rs/rsStream.h
+++ b/frameworks/base/libs/rs/rsStream.h
@@ -92,7 +92,8 @@ public:
     }
 
     void addF(float v) {
-        uint32_t uintV = *reinterpret_cast<uint32_t*> (&v);
+        uint32_t uintV;// = *reinterpret_cast<uint32_t*> (&v);
+        memcpy(&uintV, &v, sizeof(uint32_t));
         addU32(uintV);
     }
     void addI32(int32_t v) {
diff --git a/frameworks/base/libs/utils/ResourceTypes.cpp b/frameworks/base/libs/utils/ResourceTypes.cpp
index 6040df1..b8db8d8 100644
--- a/frameworks/base/libs/utils/ResourceTypes.cpp
+++ b/frameworks/base/libs/utils/ResourceTypes.cpp
@@ -85,9 +85,9 @@ inline int isspace16(char16_t c) {
 // range checked; guaranteed to NUL-terminate within the stated number of available slots
 // NOTE: if this truncates the dst string due to running out of space, no attempt is
 // made to avoid splitting surrogate pairs.
-static void strcpy16_dtoh(uint16_t* dst, const uint16_t* src, size_t avail)
+static void strcpy16_dtoh(char16_t* dst, const char16_t* src, size_t avail)
 {
-    uint16_t* last = dst + avail - 1;
+    char16_t* last = dst + avail - 1;
     while (*src && (dst < last)) {
         char16_t s = dtohs(*src);
         *dst++ = s;
@@ -570,7 +570,7 @@ decodeLength(const uint8_t** str)
     return len;
 }
 
-const uint16_t* ResStringPool::stringAt(size_t idx, size_t* u16len) const
+const char16_t* ResStringPool::stringAt(size_t idx, size_t* u16len) const
 {
     if (mError == NO_ERROR && idx < mHeader->stringCount) {
         const bool isUTF8 = (mHeader->flags&ResStringPool_header::UTF8_FLAG) != 0;
@@ -789,7 +789,7 @@ int32_t ResXMLParser::getCommentID() const
     return mCurNode != NULL ? dtohl(mCurNode->comment.index) : -1;
 }
 
-const uint16_t* ResXMLParser::getComment(size_t* outLen) const
+const char16_t* ResXMLParser::getComment(size_t* outLen) const
 {
     int32_t id = getCommentID();
     return id >= 0 ? mTree.mStrings.stringAt(id, outLen) : NULL;
@@ -808,7 +808,7 @@ int32_t ResXMLParser::getTextID() const
     return -1;
 }
 
-const uint16_t* ResXMLParser::getText(size_t* outLen) const
+const char16_t* ResXMLParser::getText(size_t* outLen) const
 {
     int32_t id = getTextID();
     return id >= 0 ? mTree.mStrings.stringAt(id, outLen) : NULL;
@@ -831,7 +831,7 @@ int32_t ResXMLParser::getNamespacePrefixID() const
     return -1;
 }
 
-const uint16_t* ResXMLParser::getNamespacePrefix(size_t* outLen) const
+const char16_t* ResXMLParser::getNamespacePrefix(size_t* outLen) const
 {
     int32_t id = getNamespacePrefixID();
     //printf("prefix=%d  event=%p\n", id, mEventCode);
@@ -846,7 +846,7 @@ int32_t ResXMLParser::getNamespaceUriID() const
     return -1;
 }
 
-const uint16_t* ResXMLParser::getNamespaceUri(size_t* outLen) const
+const char16_t* ResXMLParser::getNamespaceUri(size_t* outLen) const
 {
     int32_t id = getNamespaceUriID();
     //printf("uri=%d  event=%p\n", id, mEventCode);
@@ -864,7 +864,7 @@ int32_t ResXMLParser::getElementNamespaceID() const
     return -1;
 }
 
-const uint16_t* ResXMLParser::getElementNamespace(size_t* outLen) const
+const char16_t* ResXMLParser::getElementNamespace(size_t* outLen) const
 {
     int32_t id = getElementNamespaceID();
     return id >= 0 ? mTree.mStrings.stringAt(id, outLen) : NULL;
@@ -881,7 +881,7 @@ int32_t ResXMLParser::getElementNameID() const
     return -1;
 }
 
-const uint16_t* ResXMLParser::getElementName(size_t* outLen) const
+const char16_t* ResXMLParser::getElementName(size_t* outLen) const
 {
     int32_t id = getElementNameID();
     return id >= 0 ? mTree.mStrings.stringAt(id, outLen) : NULL;
@@ -910,7 +910,7 @@ int32_t ResXMLParser::getAttributeNamespaceID(size_t idx) const
     return -2;
 }
 
-const uint16_t* ResXMLParser::getAttributeNamespace(size_t idx, size_t* outLen) const
+const char16_t* ResXMLParser::getAttributeNamespace(size_t idx, size_t* outLen) const
 {
     int32_t id = getAttributeNamespaceID(idx);
     //printf("attribute namespace=%d  idx=%d  event=%p\n", id, idx, mEventCode);
@@ -933,7 +933,7 @@ int32_t ResXMLParser::getAttributeNameID(size_t idx) const
     return -1;
 }
 
-const uint16_t* ResXMLParser::getAttributeName(size_t idx, size_t* outLen) const
+const char16_t* ResXMLParser::getAttributeName(size_t idx, size_t* outLen) const
 {
     int32_t id = getAttributeNameID(idx);
     //printf("attribute name=%d  idx=%d  event=%p\n", id, idx, mEventCode);
@@ -965,7 +965,7 @@ int32_t ResXMLParser::getAttributeValueStringID(size_t idx) const
     return -1;
 }
 
-const uint16_t* ResXMLParser::getAttributeStringValue(size_t idx, size_t* outLen) const
+const char16_t* ResXMLParser::getAttributeStringValue(size_t idx, size_t* outLen) const
 {
     int32_t id = getAttributeValueStringID(idx);
     //XML_NOISY(printf("getAttributeValue 0x%x=0x%x\n", idx, id));
@@ -2872,7 +2872,7 @@ nope:
     return 0;
 }
 
-bool ResTable::expandResourceRef(const uint16_t* refStr, size_t refLen,
+bool ResTable::expandResourceRef(const char16_t* refStr, size_t refLen,
                                  String16* outPackage,
                                  String16* outType,
                                  String16* outName,
@@ -3172,7 +3172,7 @@ bool ResTable::stringToFloat(const char16_t* s, size_t len, Res_value* outValue)
     if (*end == 0) {
         if (outValue) {
             outValue->dataType = outValue->TYPE_FLOAT;
-            *(float*)(&outValue->data) = f;
+            memcpy(&outValue->data, &f, sizeof(float));
             return true;
         }
     }
@@ -4654,7 +4654,9 @@ void ResTable::print_value(const Package* pkg, const Res_value& value) const
             }
         } 
     } else if (value.dataType == Res_value::TYPE_FLOAT) {
-        printf("(float) %g\n", *(const float*)&value.data);
+        float f;
+        memcpy(&f, &value.data, sizeof(float));
+        printf("(float) %g\n", f);
     } else if (value.dataType == Res_value::TYPE_DIMENSION) {
         printf("(dimension) ");
         print_complex(value.data, false);
diff --git a/frameworks/base/media/jni/android_mtp_MtpDatabase.cpp b/frameworks/base/media/jni/android_mtp_MtpDatabase.cpp
index 4dbcb90..13942d5 100644
--- a/frameworks/base/media/jni/android_mtp_MtpDatabase.cpp
+++ b/frameworks/base/media/jni/android_mtp_MtpDatabase.cpp
@@ -777,7 +777,7 @@ MtpResponseCode MyMtpDatabase::getObjectInfo(MtpObjectHandle handle,
     info.mAssociationType = MTP_ASSOCIATION_TYPE_UNDEFINED;
 
     jchar* str = env->GetCharArrayElements(mStringBuffer, 0);
-    MtpString temp(str);
+    MtpString temp((char16_t*)str);
     info.mName = strdup((const char *)temp);
     env->ReleaseCharArrayElements(mStringBuffer, str, 0);
 
@@ -855,7 +855,7 @@ MtpResponseCode MyMtpDatabase::getObjectFilePath(MtpObjectHandle handle,
     }
 
     jchar* str = env->GetCharArrayElements(mStringBuffer, 0);
-    outFilePath.setTo(str, strlen16(str));
+    outFilePath.setTo((char16_t*)str, strlen16((char16_t*)str));
     env->ReleaseCharArrayElements(mStringBuffer, str, 0);
 
     jlong* longValues = env->GetLongArrayElements(mLongBuffer, 0);
diff --git a/frameworks/base/media/libeffects/visualizer/Android.mk b/frameworks/base/media/libeffects/visualizer/Android.mk
index 2160177..95b8fa0 100644
--- a/frameworks/base/media/libeffects/visualizer/Android.mk
+++ b/frameworks/base/media/libeffects/visualizer/Android.mk
@@ -6,7 +6,17 @@ include $(CLEAR_VARS)
 LOCAL_SRC_FILES:= \
 	EffectVisualizer.cpp
 
+# visualizer can't be built without optimizations, so we enforce -O2 if no
+# other optimization flag is set - but we don't override what the global
+# flags are saying if something else is given (-Os or -O3 are useful)
+ifeq ($(findstring -O, $(TARGET_GLOBAL_CFLAGS)),)
+LOCAL_CFLAGS += -O2
+endif
+ifneq ($(findstring -O0, $(TARGET_GLOBAL_CFLAGS)),)
 LOCAL_CFLAGS+= -O2
+endif
+
+LOCAL_CFLAGS+= -fno-strict-aliasing
 
 LOCAL_SHARED_LIBRARIES := \
 	libcutils \
diff --git a/frameworks/base/media/libmedia/MediaProfiles.cpp b/frameworks/base/media/libmedia/MediaProfiles.cpp
index fb3bf80..2cced57 100644
--- a/frameworks/base/media/libmedia/MediaProfiles.cpp
+++ b/frameworks/base/media/libmedia/MediaProfiles.cpp
@@ -518,16 +518,16 @@ void MediaProfiles::checkAndAddRequiredProfilesIfNecessary() {
         // Check high and low from either camcorder profile or timelapse profile
         // but not both. Default, check camcorder profile
         size_t j = 0;
-        size_t n = 2;
+        size_t n_ = 2;
         if (isTimelapseProfile(quality)) {
             // Check timelapse profile instead.
             j = 2;
-            n = kNumRequiredProfiles;
+            n_ = kNumRequiredProfiles;
         } else {
             // Must be camcorder profile.
             CHECK(isCamcorderProfile(quality));
         }
-        for (; j < n; ++j) {
+        for (; j < n_; ++j) {
             info = &(mRequiredProfileRefs[refIndex].mRefs[j]);
             if ((j % 2 == 0 && product > info->mResolutionProduct) ||  // low
                 (j % 2 != 0 && product < info->mResolutionProduct)) {  // high
diff --git a/frameworks/base/media/libmedia/Visualizer.cpp b/frameworks/base/media/libmedia/Visualizer.cpp
index bf40481..d01f537 100644
--- a/frameworks/base/media/libmedia/Visualizer.cpp
+++ b/frameworks/base/media/libmedia/Visualizer.cpp
@@ -138,13 +138,17 @@ status_t Visualizer::setCaptureSize(uint32_t size)
         return INVALID_OPERATION;
     }
 
-    uint32_t buf32[sizeof(effect_param_t) / sizeof(uint32_t) + 2];
-    effect_param_t *p = (effect_param_t *)buf32;
+    union {
+        uint32_t buf32[sizeof(effect_param_t) / sizeof(uint32_t) + 2];
+        effect_param_t bufp;
+    };
+    effect_param_t *p = &bufp;
 
     p->psize = sizeof(uint32_t);
     p->vsize = sizeof(uint32_t);
-    *(int32_t *)p->data = VISUALIZER_PARAM_CAPTURE_SIZE;
-    *((int32_t *)p->data + 1)= size;
+    int32_t const vpcs = VISUALIZER_PARAM_CAPTURE_SIZE;
+    memcpy(&p->data, &vpcs, sizeof(vpcs));
+    memcpy(&p->data+sizeof(int32_t), &size, sizeof(size));
     status_t status = setParameter(p);
 
     LOGV("setCaptureSize size %d  status %d p->status %d", size, status, p->status);
@@ -271,21 +275,24 @@ void Visualizer::periodicCapture()
 
 uint32_t Visualizer::initCaptureSize()
 {
-    uint32_t buf32[sizeof(effect_param_t) / sizeof(uint32_t) + 2];
-    effect_param_t *p = (effect_param_t *)buf32;
+    union {
+        uint32_t buf32[sizeof(effect_param_t) / sizeof(uint32_t) + 2];
+        effect_param_t p;
+    };
 
-    p->psize = sizeof(uint32_t);
-    p->vsize = sizeof(uint32_t);
-    *(int32_t *)p->data = VISUALIZER_PARAM_CAPTURE_SIZE;
-    status_t status = getParameter(p);
+    p.psize = sizeof(uint32_t);
+    p.vsize = sizeof(uint32_t);
+    int32_t const vpcs = VISUALIZER_PARAM_CAPTURE_SIZE;
+    memcpy(&p.data, &vpcs, sizeof(vpcs));
+    status_t status = getParameter(&p);
 
     if (status == NO_ERROR) {
-        status = p->status;
+        status = p.status;
     }
 
     uint32_t size = 0;
     if (status == NO_ERROR) {
-        size = *((int32_t *)p->data + 1);
+        memcpy(&size, &p.data+sizeof(int32_t), sizeof(int32_t));
     }
     mCaptureSize = size;
 
diff --git a/frameworks/base/media/libmediaplayerservice/MediaPlayerService.cpp b/frameworks/base/media/libmediaplayerservice/MediaPlayerService.cpp
index 2888888..a34a59d 100644
--- a/frameworks/base/media/libmediaplayerservice/MediaPlayerService.cpp
+++ b/frameworks/base/media/libmediaplayerservice/MediaPlayerService.cpp
@@ -541,12 +541,15 @@ static player_type getDefaultPlayerType() {
 
 player_type getPlayerType(int fd, int64_t offset, int64_t length)
 {
-    char buf[20];
+    union {
+        char buf[20];
+        long bufl[];
+    };
     lseek(fd, offset, SEEK_SET);
     read(fd, buf, sizeof(buf));
     lseek(fd, offset, SEEK_SET);
 
-    long ident = *((long*)buf);
+    long ident = *bufl;
 
     // Ogg vorbis?
     if (ident == 0x5367674f) // 'OggS'
diff --git a/frameworks/base/media/libstagefright/codecs/amrwb/Android.mk b/frameworks/base/media/libstagefright/codecs/amrwb/Android.mk
index c9e1c25..2672acd 100644
--- a/frameworks/base/media/libstagefright/codecs/amrwb/Android.mk
+++ b/frameworks/base/media/libstagefright/codecs/amrwb/Android.mk
@@ -48,7 +48,10 @@ LOCAL_C_INCLUDES := \
         $(LOCAL_PATH)/include
 
 LOCAL_CFLAGS := \
-        -DOSCL_UNUSED_ARG= -DOSCL_IMPORT_REF=
+        -DOSCL_UNUSED_ARG= -DOSCL_IMPORT_REF= \
+        $(call cc-ifversion, -ge, 47, -O2)
+# The -O2 addition above is a Workaround for gcc bug 52294
+# http://gcc.gnu.org/bugzilla/show_bug.cgi?id=52294
 
 LOCAL_MODULE := libstagefright_amrwbdec
 
diff --git a/frameworks/base/media/libstagefright/codecs/avc/enc/src/motion_comp.cpp b/frameworks/base/media/libstagefright/codecs/avc/enc/src/motion_comp.cpp
index ac62d78..1a10e44 100644
--- a/frameworks/base/media/libstagefright/codecs/avc/enc/src/motion_comp.cpp
+++ b/frameworks/base/media/libstagefright/codecs/avc/enc/src/motion_comp.cpp
@@ -1315,7 +1315,11 @@ void eDiagonalInterpMC(uint8 *in1, uint8 *in2, int inpitch,
     int result;
     uint8 *p_cur, *p_ref, *p_tmp8;
     int curr_offset, ref_offset;
-    uint8 tmp_res[24][24], tmp_in[24][24];
+    union {
+        uint8 tmp_res[24][24];
+        uint32 tmp_res32[24][24/4];
+    };
+    uint8 tmp_in[24][24];
     uint32 *p_tmp;
     uint32 tmp, pkres, tmp_result;
     int32 r0, r1, r2, r3, r4, r5;
@@ -1333,7 +1337,7 @@ void eDiagonalInterpMC(uint8 *in1, uint8 *in2, int inpitch,
             ref_offset = 24-blkwidth;
         }*/
 
-    p_tmp = (uint32*) & (tmp_res[0][0]);
+    p_tmp = (uint32*) & (tmp_res32[0][0]);
     for (j = blkheight; j > 0; j--)
     {
         r13 = 0;
diff --git a/frameworks/base/media/libstagefright/codecs/on2/h264dec/Android.mk b/frameworks/base/media/libstagefright/codecs/on2/h264dec/Android.mk
index 5b3c876..cee029d 100644
--- a/frameworks/base/media/libstagefright/codecs/on2/h264dec/Android.mk
+++ b/frameworks/base/media/libstagefright/codecs/on2/h264dec/Android.mk
@@ -96,6 +96,8 @@ ifeq ($(ARCH_ARM_HAVE_NEON),true)
                         $(LOCAL_PATH)/./omxdl/arm_neon/vc/m4p10/api
 endif
 
+LOCAL_CFLAGS += -fno-strict-aliasing
+
 LOCAL_SHARED_LIBRARIES := \
 	libstagefright libstagefright_omx libstagefright_foundation libutils \
 
diff --git a/frameworks/base/media/libstagefright/httplive/LiveSession.cpp b/frameworks/base/media/libstagefright/httplive/LiveSession.cpp
index 9f47c98..ca065c7 100644
--- a/frameworks/base/media/libstagefright/httplive/LiveSession.cpp
+++ b/frameworks/base/media/libstagefright/httplive/LiveSession.cpp
@@ -199,8 +199,9 @@ void LiveSession::onConnect(const sp<AMessage> &msg) {
             sp<AMessage> meta;
             playlist->itemAt(i, &item.mURI, &meta);
 
-            unsigned long bandwidth;
-            CHECK(meta->findInt32("bandwidth", (int32_t *)&item.mBandwidth));
+            int32_t bandwidth;
+            CHECK(meta->findInt32("bandwidth", &bandwidth));
+            item.mBandwidth = bandwidth;
 
             mBandwidthItems.push(item);
         }
diff --git a/frameworks/base/media/libstagefright/matroska/MatroskaExtractor.cpp b/frameworks/base/media/libstagefright/matroska/MatroskaExtractor.cpp
index e2bcd47..332d54f 100644
--- a/frameworks/base/media/libstagefright/matroska/MatroskaExtractor.cpp
+++ b/frameworks/base/media/libstagefright/matroska/MatroskaExtractor.cpp
@@ -790,12 +790,12 @@ void MatroskaExtractor::findThumbnails() {
         }
 
         BlockIterator iter(this, info->mTrackNum);
-        int32_t i = 0;
+        int32_t i_ = 0;
         int64_t thumbnailTimeUs = 0;
         size_t maxBlockSize = 0;
-        while (!iter.eos() && i < 20) {
+        while (!iter.eos() && i_ < 20) {
             if (iter.block()->IsKey()) {
-                ++i;
+                ++i_;
 
                 size_t blockSize = 0;
                 for (int i = 0; i < iter.block()->GetFrameCount(); ++i) {
diff --git a/frameworks/base/media/libstagefright/rtsp/ARTPConnection.cpp b/frameworks/base/media/libstagefright/rtsp/ARTPConnection.cpp
index cd374e2..88a0f50 100644
--- a/frameworks/base/media/libstagefright/rtsp/ARTPConnection.cpp
+++ b/frameworks/base/media/libstagefright/rtsp/ARTPConnection.cpp
@@ -120,21 +120,24 @@ void ARTPConnection::MakePortPair(
     start &= ~1;
 
     for (unsigned port = start; port < 65536; port += 2) {
-        struct sockaddr_in addr;
+        union {
+            struct sockaddr_in addr;
+            struct sockaddr addr_generic;
+        };
         memset(addr.sin_zero, 0, sizeof(addr.sin_zero));
         addr.sin_family = AF_INET;
         addr.sin_addr.s_addr = htonl(INADDR_ANY);
         addr.sin_port = htons(port);
 
         if (bind(*rtpSocket,
-                 (const struct sockaddr *)&addr, sizeof(addr)) < 0) {
+                 &addr_generic, sizeof(addr)) < 0) {
             continue;
         }
 
         addr.sin_port = htons(port + 1);
 
         if (bind(*rtcpSocket,
-                 (const struct sockaddr *)&addr, sizeof(addr)) == 0) {
+                 &addr_generic, sizeof(addr)) == 0) {
             *rtpPort = port;
             return;
         }
@@ -340,9 +343,14 @@ void ARTPConnection::onPollStreams() {
 
                 ssize_t n;
                 do {
+                    union {
+                        sockaddr_in *sa_in;
+                        sockaddr *sa;
+                        };
+                        sa_in = &s->mRemoteRTCPAddr;
                     n = sendto(
                         s->mRTCPSocket, buffer->data(), buffer->size(), 0,
-                        (const struct sockaddr *)&s->mRemoteRTCPAddr,
+                        sa,
                         sizeof(s->mRemoteRTCPAddr));
                 } while (n < 0 && errno == EINTR);
 
@@ -381,12 +389,17 @@ status_t ARTPConnection::receive(StreamInfo *s, bool receiveRTP) {
 
     ssize_t nbytes;
     do {
+        union {
+            sockaddr_in *sa_in;
+            sockaddr *sa;
+        };
+        sa_in = &s->mRemoteRTCPAddr;
         nbytes = recvfrom(
             receiveRTP ? s->mRTPSocket : s->mRTCPSocket,
             buffer->data(),
             buffer->capacity(),
             0,
-            remoteAddrLen > 0 ? (struct sockaddr *)&s->mRemoteRTCPAddr : NULL,
+            remoteAddrLen > 0 ? sa : NULL,
             remoteAddrLen > 0 ? &remoteAddrLen : NULL);
     } while (nbytes < 0 && errno == EINTR);
 
diff --git a/frameworks/base/media/libstagefright/rtsp/ARTSPConnection.cpp b/frameworks/base/media/libstagefright/rtsp/ARTSPConnection.cpp
index 380b3dc..353eb08 100644
--- a/frameworks/base/media/libstagefright/rtsp/ARTSPConnection.cpp
+++ b/frameworks/base/media/libstagefright/rtsp/ARTSPConnection.cpp
@@ -268,14 +268,17 @@ void ARTSPConnection::onConnect(const sp<AMessage> &msg) {
 
     MakeSocketBlocking(mSocket, false);
 
-    struct sockaddr_in remote;
+    union {
+        struct sockaddr_in remote;
+        struct sockaddr remote_generic;
+    };
     memset(remote.sin_zero, 0, sizeof(remote.sin_zero));
     remote.sin_family = AF_INET;
     remote.sin_addr.s_addr = *(in_addr_t *)ent->h_addr;
     remote.sin_port = htons(port);
 
     int err = ::connect(
-            mSocket, (const struct sockaddr *)&remote, sizeof(remote));
+            mSocket, &remote_generic, sizeof(remote));
 
     reply->setInt32("server-ip", ntohl(remote.sin_addr.s_addr));
 
diff --git a/frameworks/base/media/libstagefright/rtsp/MyHandler.h b/frameworks/base/media/libstagefright/rtsp/MyHandler.h
index 5a95f9c..553a1f3 100644
--- a/frameworks/base/media/libstagefright/rtsp/MyHandler.h
+++ b/frameworks/base/media/libstagefright/rtsp/MyHandler.h
@@ -197,9 +197,12 @@ struct MyHandler : public AHandler {
     }
 
     static void addSDES(int s, const sp<ABuffer> &buffer) {
-        struct sockaddr_in addr;
+        union {
+            struct sockaddr_in addr;
+            struct sockaddr addr_generic;
+        };
         socklen_t addrSize = sizeof(addr);
-        CHECK_EQ(0, getsockname(s, (sockaddr *)&addr, &addrSize));
+        CHECK_EQ(0, getsockname(s, &addr_generic, &addrSize));
 
         uint8_t *data = buffer->data() + buffer->size();
         data[0] = 0x80 | 1;
@@ -255,7 +258,10 @@ struct MyHandler : public AHandler {
     // rtp/rtcp ports to poke a hole into the firewall for future incoming
     // packets. We're going to send an RR/SDES RTCP packet to both of them.
     bool pokeAHole(int rtpSocket, int rtcpSocket, const AString &transport) {
-        struct sockaddr_in addr;
+        union {
+            struct sockaddr_in addr;
+            struct sockaddr addr_generic;
+        };
         memset(addr.sin_zero, 0, sizeof(addr.sin_zero));
         addr.sin_family = AF_INET;
 
@@ -324,7 +330,7 @@ struct MyHandler : public AHandler {
 
         ssize_t n = sendto(
                 rtpSocket, buf->data(), buf->size(), 0,
-                (const sockaddr *)&addr, sizeof(addr));
+                &addr_generic, sizeof(addr));
 
         if (n < (ssize_t)buf->size()) {
             LOGE("failed to poke a hole for RTP packets");
@@ -335,7 +341,7 @@ struct MyHandler : public AHandler {
 
         n = sendto(
                 rtcpSocket, buf->data(), buf->size(), 0,
-                (const sockaddr *)&addr, sizeof(addr));
+                &addr_generic, sizeof(addr));
 
         if (n < (ssize_t)buf->size()) {
             LOGE("failed to poke a hole for RTCP packets");
diff --git a/frameworks/base/native/include/android/native_window.h b/frameworks/base/native/include/android/native_window.h
index 2f4f2d3..45caed4 100644
--- a/frameworks/base/native/include/android/native_window.h
+++ b/frameworks/base/native/include/android/native_window.h
@@ -18,6 +18,7 @@
 #define ANDROID_NATIVE_WINDOW_H
 
 #include <android/rect.h>
+#include <system/window.h>
 
 #ifdef __cplusplus
 extern "C" {
@@ -32,9 +33,6 @@ enum {
     WINDOW_FORMAT_RGB_565            = 4,
 };
 
-struct ANativeWindow;
-typedef struct ANativeWindow ANativeWindow;
-
 typedef struct ANativeWindow_Buffer {
     // The number of pixels that are show horizontally.
     int32_t width;
@@ -51,7 +49,7 @@ typedef struct ANativeWindow_Buffer {
 
     // The actual bits.
     void* bits;
-    
+
     // Do not touch.
     uint32_t reserved[6];
 } ANativeWindow_Buffer;
diff --git a/frameworks/base/opengl/libagl/Android.mk b/frameworks/base/opengl/libagl/Android.mk
index ce55093..73b7085 100644
--- a/frameworks/base/opengl/libagl/Android.mk
+++ b/frameworks/base/opengl/libagl/Android.mk
@@ -22,12 +22,19 @@ LOCAL_SRC_FILES:= \
 	primitives.cpp.arm	        \
 	vertex.cpp.arm
 
+FLTO_FLAG=$(call cc-option,"-flto", )
 LOCAL_CFLAGS += -DLOG_TAG=\"libagl\"
 LOCAL_CFLAGS += -DGL_GLEXT_PROTOTYPES -DEGL_EGLEXT_PROTOTYPES
 LOCAL_CFLAGS += -fvisibility=hidden
+LOCAL_CFLAGS += -ffast-math $(FLTO_FLAG)
+ifneq ($(findstring tune=cortex-a8,$(TARGET_GLOBAL_CFLAGS)),)
+       # Workaround for cortex-a8 specific linaro-gcc bug 879725
+       # FIXME remove once the bug is fixed
+       LOCAL_CFLAGS += -fno-modulo-sched
+endif
 
 LOCAL_SHARED_LIBRARIES := libcutils libhardware libutils libpixelflinger libETC1
-LOCAL_LDLIBS := -lpthread -ldl
+LOCAL_LDLIBS := $(FLTO_FLAG) -lpthread -ldl
 
 ifeq ($(TARGET_ARCH),arm)
 	LOCAL_SRC_FILES += fixed_asm.S iterators.S
diff --git a/frameworks/base/opengl/libs/Android.mk b/frameworks/base/opengl/libs/Android.mk
index f76e353..9701e97 100644
--- a/frameworks/base/opengl/libs/Android.mk
+++ b/frameworks/base/opengl/libs/Android.mk
@@ -1,5 +1,7 @@
 LOCAL_PATH:= $(call my-dir)
 
+FLTO_FLAG=$(call cc-option,"-flto", )
+
 ###############################################################################
 # Build META EGL library
 #
@@ -17,8 +19,9 @@ LOCAL_SRC_FILES:= 	       \
 	EGL/getProcAddress.cpp.arm \
 	EGL/Loader.cpp 	       \
 
+LOCAL_CFLAGS += $(FLTO_FLAG) -ffast-math
 LOCAL_SHARED_LIBRARIES += libcutils libutils libGLESv2_dbg
-LOCAL_LDLIBS := -lpthread -ldl
+LOCAL_LDLIBS := $(FLTO_FLAG) -lpthread -ldl
 LOCAL_MODULE:= libEGL
 LOCAL_LDFLAGS += -Wl,--exclude-libs=ALL
 LOCAL_SHARED_LIBRARIES += libdl
@@ -75,7 +78,8 @@ include $(CLEAR_VARS)
 LOCAL_SRC_FILES := GLES_CM/gl.cpp.arm
 
 LOCAL_SHARED_LIBRARIES += libcutils libEGL
-LOCAL_LDLIBS := -lpthread -ldl
+LOCAL_CFLAGS += $(FLTO_FLAG) -ffast-math
+LOCAL_LDLIBS := $(FLTO_FLAG) -lpthread -ldl
 LOCAL_MODULE:= libGLESv1_CM
 
 LOCAL_SHARED_LIBRARIES += libdl
@@ -103,8 +107,9 @@ include $(CLEAR_VARS)
 
 LOCAL_SRC_FILES := GLES2/gl2.cpp.arm
 
+LOCAL_CFLAGS += $(FLTO_FLAG) -ffast-math
 LOCAL_SHARED_LIBRARIES += libcutils libEGL
-LOCAL_LDLIBS := -lpthread -ldl
+LOCAL_LDLIBS := $(FLTO_FLAG) -lpthread -ldl
 LOCAL_MODULE:= libGLESv2
 
 LOCAL_SHARED_LIBRARIES += libdl
@@ -144,7 +149,8 @@ include $(CLEAR_VARS)
 
 LOCAL_SRC_FILES := ETC1/etc1.cpp
 
-LOCAL_LDLIBS := -lpthread -ldl
+LOCAL_CFLAGS += $(FLTO_FLAG) -ffast-math
+LOCAL_LDLIBS := $(FLTO_FLAG) -lpthread -ldl
 LOCAL_MODULE:= libETC1
 
 include $(BUILD_SHARED_LIBRARY)
diff --git a/frameworks/base/opengl/libs/EGL/Loader.cpp b/frameworks/base/opengl/libs/EGL/Loader.cpp
index 325193c..70eac54 100644
--- a/frameworks/base/opengl/libs/EGL/Loader.cpp
+++ b/frameworks/base/opengl/libs/EGL/Loader.cpp
@@ -311,16 +311,18 @@ void *Loader::load_driver(const char* kind, const char *tag,
     }
     
     if (mask & GLESv1_CM) {
+        void *gl=&cnx->hooks[GLESv1_INDEX]->gl;
         init_api(dso, gl_names,
             (__eglMustCastToProperFunctionPointerType*)
-                &cnx->hooks[GLESv1_INDEX]->gl,
+                gl,
             getProcAddress);
     }
 
     if (mask & GLESv2) {
+      void *gl=&cnx->hooks[GLESv2_INDEX]->gl;
       init_api(dso, gl_names,
             (__eglMustCastToProperFunctionPointerType*)
-                &cnx->hooks[GLESv2_INDEX]->gl,
+                gl,
             getProcAddress);
     }
     
diff --git a/frameworks/base/opengl/libs/GLES2_dbg/src/server.cpp b/frameworks/base/opengl/libs/GLES2_dbg/src/server.cpp
index 0c711bf..80a2d08 100644
--- a/frameworks/base/opengl/libs/GLES2_dbg/src/server.cpp
+++ b/frameworks/base/opengl/libs/GLES2_dbg/src/server.cpp
@@ -49,7 +49,16 @@ void StartDebugServer(const unsigned short port, const bool forceUseFile,
         return;
 
     LOGD("GLESv2_dbg: StartDebugServer create socket");
-    struct sockaddr_in server = {}, client = {};
+    union {
+        sockaddr_in server;
+        sockaddr server_generic;
+    };
+    union {
+        sockaddr_in client;
+        sockaddr client_generic;
+    };
+    server = {};
+    client = {};
 
     /* Create the TCP socket */
     if (forceUseFile || (serverSock = socket(PF_INET, SOCK_STREAM, IPPROTO_TCP)) < 0) {
@@ -66,7 +75,7 @@ void StartDebugServer(const unsigned short port, const bool forceUseFile,
 
     /* Bind the server socket */
     socklen_t sizeofSockaddr_in = sizeof(sockaddr_in);
-    if (bind(serverSock, (struct sockaddr *) &server,
+    if (bind(serverSock, &server_generic,
              sizeof(server)) < 0) {
         Die("Failed to bind the server socket");
     }
@@ -80,7 +89,7 @@ void StartDebugServer(const unsigned short port, const bool forceUseFile,
 
     /* Wait for client connection */
     if ((clientSock =
-                accept(serverSock, (struct sockaddr *) &client,
+                accept(serverSock, &client_generic,
                        &sizeofSockaddr_in)) < 0) {
         Die("Failed to accept client connection");
     }
diff --git a/frameworks/base/opengl/libs/GLES2_dbg/test/Android.mk b/frameworks/base/opengl/libs/GLES2_dbg/test/Android.mk
index 8708d43..e2d223c 100644
--- a/frameworks/base/opengl/libs/GLES2_dbg/test/Android.mk
+++ b/frameworks/base/opengl/libs/GLES2_dbg/test/Android.mk
@@ -32,6 +32,7 @@ LOCAL_C_INCLUDES += bionic/libc/private
 LOCAL_CFLAGS += -DLOG_TAG=\"libEGL\"
 LOCAL_CFLAGS += -DGL_GLEXT_PROTOTYPES -DEGL_EGLEXT_PROTOTYPES
 LOCAL_CFLAGS += -fvisibility=hidden
+LOCAL_CFLAGS += -fno-strict-aliasing
 
 include $(BUILD_EXECUTABLE)
 
diff --git a/frameworks/base/services/audioflinger/AudioResampler.h b/frameworks/base/services/audioflinger/AudioResampler.h
index ffa690a..57a886f 100644
--- a/frameworks/base/services/audioflinger/AudioResampler.h
+++ b/frameworks/base/services/audioflinger/AudioResampler.h
@@ -22,6 +22,10 @@
 
 #include "AudioBufferProvider.h"
 
+#if __cplusplus < 201103L && !defined(__GXX_EXPERIMENTAL_CXX0X__) && !defined(constexpr)
+#define constexpr const
+#endif
+
 namespace android {
 // ----------------------------------------------------------------------------
 
@@ -58,13 +62,13 @@ public:
 
 protected:
     // number of bits for phase fraction - 30 bits allows nearly 2x downsampling
-    static const int kNumPhaseBits = 30;
+    static constexpr int kNumPhaseBits = 30;
 
     // phase mask for fraction
-    static const uint32_t kPhaseMask = (1LU<<kNumPhaseBits)-1;
+    static constexpr uint32_t kPhaseMask = (1LU<<kNumPhaseBits)-1;
 
     // multiplier to calculate fixed point phase increment
-    static const double kPhaseMultiplier = 1L << kNumPhaseBits;
+    static constexpr double kPhaseMultiplier = 1L << kNumPhaseBits;
 
     enum format {MONO_16_BIT, STEREO_16_BIT};
     AudioResampler(int bitDepth, int inChannelCount, int32_t sampleRate);
diff --git a/frameworks/base/voip/jni/rtp/AudioGroup.cpp b/frameworks/base/voip/jni/rtp/AudioGroup.cpp
index bd8c1c4..c54ffd1 100644
--- a/frameworks/base/voip/jni/rtp/AudioGroup.cpp
+++ b/frameworks/base/voip/jni/rtp/AudioGroup.cpp
@@ -406,7 +406,11 @@ void AudioStream::decode(int tick)
         count = recv(mSocket, samples, sizeof(samples),
             MSG_TRUNC | MSG_DONTWAIT) >> 1;
     } else {
-        __attribute__((aligned(4))) uint8_t buffer[2048];
+        __attribute__((aligned(4))) union {
+            uint8_t buffer[2048];
+            uint16_t buffer16[2048/2];
+            uint32_t buffer32[2048/4];
+        };
         sockaddr_storage remote;
         socklen_t addrlen = sizeof(remote);
 
@@ -416,13 +420,13 @@ void AudioStream::decode(int tick)
         // Do we need to check SSRC, sequence, and timestamp? They are not
         // reliable but at least they can be used to identify duplicates?
         if (length < 12 || length > (int)sizeof(buffer) ||
-            (ntohl(*(uint32_t *)buffer) & 0xC07F0000) != mCodecMagic) {
+            (ntohl(*buffer32) & 0xC07F0000) != mCodecMagic) {
             LOGV("stream[%d] malformed packet", mSocket);
             return;
         }
         int offset = 12 + ((buffer[0] & 0x0F) << 2);
         if ((buffer[0] & 0x10) != 0) {
-            offset += 4 + (ntohs(*(uint16_t *)&buffer[offset + 2]) << 2);
+            offset += 4 + (ntohs(buffer16[(offset + 2)/2]) << 2);
         }
         if ((buffer[0] & 0x20) != 0) {
             length -= buffer[length - 1];

diff --git a/libcore/NativeCode.mk b/libcore/NativeCode.mk
index 1e7c4f4..81e06e5 100644
--- a/libcore/NativeCode.mk
+++ b/libcore/NativeCode.mk
@@ -88,7 +88,7 @@ core_cflags += '-DGCC_HIDDEN=__attribute__((visibility("hidden")))'
 
 include $(CLEAR_VARS)
 
-LOCAL_CFLAGS += -Wall -Wextra -Werror
+LOCAL_CFLAGS += -Wall -Wextra
 LOCAL_CFLAGS += $(core_cflags)
 ifeq ($(TARGET_ARCH),arm)
 # Ignore "note: the mangling of 'va_list' has changed in GCC 4.4"

diff --git a/system/media/wilhelm/src/Android.mk b/system/media/wilhelm/src/Android.mk
index 6da321a..dc89cc2 100644
--- a/system/media/wilhelm/src/Android.mk
+++ b/system/media/wilhelm/src/Android.mk
@@ -207,7 +207,8 @@ LOCAL_PRELINK_MODULE := false
 LOCAL_MODULE_TAGS := optional
 LOCAL_CFLAGS += -x c++ -DLI_API= -fvisibility=hidden -UNDEBUG \
                 -DSL_API='__attribute__((visibility("default")))'
-LOCAL_SHARED_LIBRARIES := libwilhelm
+LOCAL_SHARED_LIBRARIES := libwilhelm \
+         libutils
 include $(BUILD_SHARED_LIBRARY)
 
 include $(CLEAR_VARS)
@@ -222,5 +223,6 @@ LOCAL_PRELINK_MODULE := false
 LOCAL_MODULE_TAGS := optional
 LOCAL_CFLAGS += -x c++ -DLI_API= -fvisibility=hidden -UNDEBUG \
                 -DXA_API='__attribute__((visibility("default")))'
-LOCAL_SHARED_LIBRARIES := libwilhelm
+LOCAL_SHARED_LIBRARIES := libwilhelm \
+         libutils
 include $(BUILD_SHARED_LIBRARY)
